package com.dbkj.meet.model;

import com.dbkj.meet.dic.Constant;
import com.dbkj.meet.dic.UserType;
import com.dbkj.meet.model.base.BaseBill;
import com.dbkj.meet.utils.ParameterUtil;
import com.dbkj.meet.utils.SqlUtil;
import com.jfinal.plugin.activerecord.*;
import sun.swing.BakedArrayList;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Bill extends BaseBill<Bill> {
	public static final Bill dao = new Bill();
	//fields name
	public final String BEGIN_TIME_KEY="beginTime";
	public final String END_TIME_KEY="endTime";
	public final String SUBJECT="b.subject";
	public final String RECORD_ID="rid";

	public final String UID="c.uid";
	public final String CID="c.cid";

	public final String BELONG="a.belong";

	/**
	 * 根据userid和查询条件获取数据
	 * @param id
	 * @param paraMap
	 * @return
	 */
	public List<Bill> getListByUserId(long id, Map<String,Object> paraMap){
		List<Object> params=new ArrayList<>();
		params.add(id);
		String where=getWhereAndParam(params,paraMap);
		return find(SqlUtil.getSql("getListByUserId",this).concat(where),params.toArray(new Object[params.size()]));
	}

	private String getWhereAndParam(List<Object> params,Map<String,Object> paraMap){
		StringBuilder where=new StringBuilder(50);
		if(paraMap!=null) {
			if (paraMap.containsKey(BEGIN_TIME_KEY) && paraMap.containsKey(END_TIME_KEY)) {
				where.append(" AND a.startTime BETWEEN ? AND ?");
				params.add(paraMap.get(BEGIN_TIME_KEY));
				params.add(paraMap.get(END_TIME_KEY));
				paraMap.remove(BEGIN_TIME_KEY);
				paraMap.remove(END_TIME_KEY);
			} else if (paraMap.containsKey(BEGIN_TIME_KEY) && !paraMap.containsKey(END_TIME_KEY)) {
				where.append(" AND a.startTime>=?");
				params.add(paraMap.get(BEGIN_TIME_KEY));
				paraMap.remove(BEGIN_TIME_KEY);
			} else if (!paraMap.containsKey(BEGIN_TIME_KEY) && paraMap.containsKey(END_TIME_KEY)) {
				where.append(" AND a.startTime<=?");
				params.add(paraMap.get(END_TIME_KEY));
				paraMap.remove(END_TIME_KEY);
			}
			if (paraMap.containsKey(SUBJECT)) {
				where.append(" AND a.subject LIKE ?");
				params.add("%" + paraMap.get(SUBJECT) + "%");
				paraMap.remove(SUBJECT);
			}
			if(paraMap.containsKey(BELONG)){
				User user= (User) paraMap.get(BELONG);
				if(user.getAid()== UserType.ADMIN.getTypeCode()){
					where.append(" AND "+BELONG);
					where.append(" IN (SELECT id FROM `user` WHERE cid=?)");
					params.add(user.getCid());
					paraMap.remove(BELONG);
				}else{
					where.append(" AND "+BELONG);
					where.append("=?");
					params.add(user.getId());
					paraMap.remove(BELONG);
				}
			}
			for (Map.Entry<String, Object> entry : paraMap.entrySet()) {
				String key = entry.getKey();
				where.append(" AND ");
				where.append(key + "=?");
				params.add(entry.getValue());
			}
		}
		return where.toString();
	}

	public List<Bill> getListByCompanyId(long cid,Map<String,Object> paraMap){
		List<Object> params=new ArrayList<>();
		params.add(cid);
		String where=getWhereAndParam(params,paraMap);
		return find(SqlUtil.getSql("getListByCompanyId",this).concat(where),params.toArray(new Object[params.size()]));
	}

	/**
	 * 获取话单的分页数据
	 * @param paraMap
	 * @return
	 */
	public Page<com.jfinal.plugin.activerecord.Record> getBillPage(Map<String,Object> paraMap){
		int pageNumber=1;
		int pageSize=15;
		if(paraMap.containsKey(Constant.CURRENT_PAGE_KEY)){
			pageNumber= (int) paraMap.get(Constant.CURRENT_PAGE_KEY);
			paraMap.remove(Constant.CURRENT_PAGE_KEY);
		}
		if(paraMap.containsKey(Constant.PAGE_SIZE_KEY)){
			pageSize= (int) paraMap.get(Constant.PAGE_SIZE_KEY);
			paraMap.remove(Constant.PAGE_SIZE_KEY);
		}
		List<Object> params=new ArrayList<>();
		String where = getWhereAndParam(params,paraMap);
		where = where.concat(" ORDER BY startTime DESC");
		return Db.paginate(pageNumber,pageSize,SqlUtil.getSql("getBillPage.select",this),
				SqlUtil.getSql("getBillPage.sqlExceptSelect",this).concat(where),params.toArray(new Object[params.size()]));
	}

	public Page<Bill> findByRecordId(Map<String,Object> paraMap){
		int pageNum=1;
		int pageSize=5;
		if(paraMap.containsKey(Constant.CURRENT_PAGE_KEY)){
			pageNum= (int) paraMap.get(Constant.CURRENT_PAGE_KEY);
			paraMap.remove(Constant.CURRENT_PAGE_KEY);
		}
		if(paraMap.containsKey(Constant.PAGE_SIZE_KEY)){
			pageSize= (int) paraMap.get(Constant.PAGE_SIZE_KEY);
			paraMap.remove(Constant.PAGE_SIZE_KEY);
		}
		List<Object> params=new ArrayList<>();
		StringBuilder where=new StringBuilder(50);
		ParameterUtil.getPara(paraMap,where,params);
		where.append(" ORDER BY gmt_create DESC");
		return paginate(pageNum,pageSize,SqlUtil.getSql("findByRecordId.select",this),
				SqlUtil.getSql("findByRecordId.sqlExceptSelect",this).concat(where.toString()),params.toArray(new Object[params.size()]));
	}

	public Page<Bill> getPage(Map<String,Object> paraMap){
		int pageNum=1;
		int pageSize=5;
		if(paraMap.containsKey(Constant.CURRENT_PAGE_KEY)){
			pageNum= (int) paraMap.get(Constant.CURRENT_PAGE_KEY);
			paraMap.remove(Constant.CURRENT_PAGE_KEY);
		}
		if(paraMap.containsKey(Constant.PAGE_SIZE_KEY)){
			pageSize= (int) paraMap.get(Constant.PAGE_SIZE_KEY);
			paraMap.remove(Constant.PAGE_SIZE_KEY);
		}

		List<Object> params=new ArrayList<>();
		StringBuilder where=new StringBuilder(50);
		if(paraMap.containsKey(UID)){
			params.add(paraMap.get(UID));
			paraMap.remove(UID);
		}
		if(paraMap.containsKey(CID)){
			params.add(paraMap.get(CID));
			params.add(paraMap.get(CID));
			paraMap.remove(CID);
		}
		ParameterUtil.getPara(paraMap,where,params);
		where.append(" ORDER BY gmt_create DESC");
		return paginate(pageNum,pageSize,SqlUtil.getSql("getPage.select",this),
				SqlUtil.getSql("getPage.sqlExceptSelect",this).concat(where.toString()),params.toArray(new Object[params.size()]));
	}

	public List<Bill> getBillList(Map<String,Object> paraMap){
		List<Object> params=new ArrayList<Object>();
		String where=getWhereAndParam(params,paraMap);
		StringBuilder whereSql=new StringBuilder(where);
		ParameterUtil.getPara(paraMap,whereSql,params);
		return find(SqlUtil.getSql("getBillList",this).concat(whereSql.toString()),params.toArray(new Object[params.size()]));
	}

	public long getCountByRecordId(Map<String,Object> paraMap){
		StringBuilder where=new StringBuilder(100);
		List<Object> params=new ArrayList<>();
		ParameterUtil.getPara(paraMap,where,params);
		return findFirst(SqlUtil.getSql("getCountByRecordId",this).concat(where.toString()),
				params.toArray(new Object[params.size()])).getLong("count");
	}

	public List<Bill> getList(Map<String,Object> paraMap){
		List<Object> params=new ArrayList<Object>();
		StringBuilder where=new StringBuilder(20);
		for(Map.Entry<String,Object> entry:paraMap.entrySet()){
			if(where.length()>0){
				where.append(" AND ");
			}else{
				where.append(" WHERE ");
			}
			where.append(entry.getKey());
			where.append("=?");
			params.add(entry.getValue());
		}
		return find(SqlUtil.getSql("getList",this),params);
	}

	public BigDecimal getTotalFee(Map<String,Object> paraMap){
		List<Object> params=new ArrayList<>();
		String where=getWhereAndParam(params,paraMap);
		return findFirst(SqlUtil.getSql("getTotalFee",this).concat(where),params.toArray(new Object[params.size()])).get("total");
	}
}
