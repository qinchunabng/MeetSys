package com.dbkj.meet.model;

import com.dbkj.meet.dic.Constant;
import com.dbkj.meet.dic.MeetState;
import com.dbkj.meet.model.base.BaseRecord;
import com.dbkj.meet.utils.SqlUtil;
import com.jfinal.plugin.activerecord.Page;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Record extends BaseRecord<Record> {
	public static final Record dao = new Record();

	public static final String BEGIN_TIME="beginTime";
	public static final String END_TIME="endTime";
	public static final String SUBJECT="subject";

	/**
	 * 通过用户id获取用户结束会议记录
	 * @param uid
	 * @return
     */
	public List<Record> getFinishedListByUserId(Long uid){
		return find(SqlUtil.getSql("getFinishedListByUserId",this),uid, MeetState.FINSHED);
	}

	/**
	 * 获取用户正在进行中的会议记录
	 * @param uid
	 * @return
     */
	public List<Record> getMeetListByUserId(Long uid){
		return find(SqlUtil.getSql("getMeetListByUserId",this),uid,MeetState.FINSHED.getStateCode());
	}

	/**
	 * 获取使用中的会议密码
	 * @return
     */
	public List<Record> getUsedPassword(){
		return find(SqlUtil.getSql("getUsedPassword",this));
	}

	public Page<Record> getRecordPages(Map<String,Object> map){
		int currentPage=1;
		int pageSize=Constant.DEFAULT_PAGE_SIZE;

		StringBuilder where=new StringBuilder(200);
		List<Object> params=new ArrayList<Object>();
		if(map!=null){
			if(map.containsKey(BEGIN_TIME)){
				where.append(" AND r.startTime>=?");
				params.add(map.get(BEGIN_TIME));
			}
			if(map.containsKey(END_TIME)){
				where.append(" AND r.startTime<=?");
				params.add(map.get(END_TIME));
			}
			for(String key:map.keySet()){
				Object value=map.get(key);
				if(value!=null){
					if(Constant.CURRENT_PAGE_KEY.equals(key)||Constant.PAGE_SIZE_KEY.equals(key)||BEGIN_TIME.equals(key)||END_TIME.equals(key)){
						continue;
					}

					where.append(" AND ");
					where.append(key);
					if("r.subject".equals(key)){
						where.append(" LIKE ?");
						params.add("%"+value+"%");
						continue;
					}

					where.append("=?");
					params.add(value);
				}
			}
			Object obj1=map.get(Constant.CURRENT_PAGE_KEY);
			if(obj1!=null){
				currentPage=Integer.parseInt(obj1.toString());
			}

			Object obj2=map.get(Constant.PAGE_SIZE_KEY);
			if(obj2!=null){
				pageSize=Integer.parseInt(obj2.toString());
			}
		}
		where.append(" ORDER BY r.startTime DESC");
		return paginate(currentPage,pageSize,SqlUtil.getSql("getRecordPages.select",this),
				SqlUtil.getSql("getRecordPages.sqlExceptSelect",this).concat(where.toString()),params.toArray());
	}

	public Record findByUserId(long uid){
		return findFirst(SqlUtil.getSql("findByUserId",this),uid,MeetState.FINSHED.getStateCode());
	}

	public Record findByMeetId(String meetId){
		return findFirst(SqlUtil.getSql("findByMeetId",this),meetId);
	}

	public BigDecimal getTotalFeeByUserId(long uid,Map<String,Object> paraMap){
		StringBuilder where=new StringBuilder(80);
		List<Object> params=new ArrayList<>();
		params.add(uid);
		getWhere(paraMap,where,params,"startTime");
		return findFirst(SqlUtil.getSql("getTotalFeeByCompanyId",this).concat(where.toString()),params.toArray(new Object[params.size()])).get("total");
	}

	private void getWhere(Map<String,Object> paraMap,StringBuilder where,List<Object> params,String colName){
		if(paraMap.containsKey(Record.BEGIN_TIME)&&!paraMap.containsKey(Record.END_TIME)){
			where.append(" AND ");
			where.append(colName);
			where.append(">=?");
			params.add(paraMap.get(Record.BEGIN_TIME));
			paraMap.remove(Record.BEGIN_TIME);
		}else if(paraMap.containsKey(Record.END_TIME)&&!paraMap.containsKey(Record.BEGIN_TIME)){
			where.append(" AND ");
			where.append(colName);
			where.append("<=?");
			params.add(paraMap.get(Record.END_TIME));
			paraMap.remove(Record.END_TIME);
		}else if(paraMap.containsKey(Record.BEGIN_TIME)&&paraMap.containsKey(END_TIME)){
			where.append(" AND ");
			where.append(colName);
			where.append(" BETWEEN ? AND ?");
			params.add(paraMap.get(Record.BEGIN_TIME));
			params.add(paraMap.get(Record.END_TIME));
			paraMap.remove(paraMap.get(Record.BEGIN_TIME));
			paraMap.remove(Record.END_TIME);
		}
		if(paraMap.containsKey(Record.SUBJECT)){
			where.append(" AND subject LIKE ?");
			params.add("%"+paraMap.get(Record.SUBJECT)+"%");
			paraMap.remove(Record.SUBJECT);
		}

		for(Map.Entry<String,Object> entry:paraMap.entrySet()){
			String key=entry.getKey();
			Object value=entry.getValue();
			if(value!=null){
				where.append(key);
				where.append("=?");
				params.add(value);
			}
		}
	}

	public BigDecimal getTotalFeeByCompanyId(long cid,Map<String,Object> paraMap){
		StringBuilder where=new StringBuilder(80);
		List<Object> params=new ArrayList<>();
		params.add(cid);
		getWhere(paraMap,where,params,"startTime");
		return findFirst(SqlUtil.getSql("getTotalFeeByCompanyId",this),cid).get("total");
	}
}
