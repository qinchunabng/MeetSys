package com.dbkj.meet.model;

import com.dbkj.meet.dic.Constant;
import com.dbkj.meet.model.base.BasePublicContacts;
import com.dbkj.meet.utils.SqlUtil;
import com.jfinal.plugin.activerecord.*;
import com.jfinal.plugin.activerecord.Record;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class PublicContacts extends BasePublicContacts<PublicContacts> {
	public static final PublicContacts dao = new PublicContacts();
	public static final String COMPANY_ID="a.cid";

	/**
	 * 删除公司中没有对应联系电话的联系人的信息
	 * @param id
	 * @return
     */
	public int deleteNotExistByCompanyId(long id){
		return Db.update(SqlUtil.getSql("deleteNotExistByCompanyId",this),id);
	}

	public int deleteByCompanyId(long id){
		return Db.update(SqlUtil.getSql("deleteByCompanyId",this),id);
	}

	public int deleteByDepartmentId(long id){
		return Db.update(SqlUtil.getSql("deleteByDepartmentId",this),id);
	}

	public List<Record> getContacts(Map<String,Object> map){
		StringBuilder where=new StringBuilder(200);
		List<Object> params=getSelectCondition(map,where);
		return Db.find(SqlUtil.getSql("getContacts",this).concat(where.toString()),params.toArray());
	}

	private List<Object> getSelectCondition(Map<String,Object> map,StringBuilder stringBuilder){
		List<Object> params=new ArrayList<Object>();

		if (stringBuilder == null) {
			stringBuilder = new StringBuilder(100);
		}
		if (map.containsKey("a.name") && map.containsKey("b.phone")) {
			if (stringBuilder.length() > 0) {
				stringBuilder.append(" AND ");
			} else {
				stringBuilder.append(" WHERE ");
			}
			stringBuilder.append("(a.name LIKE ? OR b.phone LIKE ?)");
			params.add("%" + map.get("a.name") + "%");
			params.add("%" + map.get("b.phone") + "%");
			map.remove("a.name");
			map.remove("b.phone");
		}

		for (String key : map.keySet()) {
			Object value = map.get(key);
			if (value != null) {
				if (stringBuilder.length() == 0) {
					stringBuilder.append(" WHERE ");
				} else {
					stringBuilder.append(" AND ");
				}
				stringBuilder.append(key);
				stringBuilder.append("=?");
				params.add(value);
			}
		}
		return params;
	}

	public Page<Record> getContactsPage(Map<String,Object> map){
		int currentPage=1;
		int pageSize= Constant.DEFAULT_PAGE_SIZE;
		StringBuilder where=new StringBuilder(200);

		if(map.containsKey(Constant.CURRENT_PAGE_KEY)){
			currentPage = Integer.parseInt(map.get(Constant.CURRENT_PAGE_KEY).toString());
			map.remove(Constant.CURRENT_PAGE_KEY);
		}
		if(map.containsKey(Constant.PAGE_SIZE_KEY)){
			pageSize= Integer.parseInt(map.get(Constant.PAGE_SIZE_KEY).toString());
			map.remove(Constant.PAGE_SIZE_KEY);
		}
		List<Object> params=getSelectCondition(map,where);

		return Db.paginate(currentPage,pageSize,SqlUtil.getSql("getContactsPage.select",this),
				SqlUtil.getSql("getContactsPage.sqlExceptSelect",this).concat(where.toString()),params.toArray(new Object[params.size()]));
	}


	public PublicContacts findByNameAndCompanyId(String name,long cid){
		return findFirst(SqlUtil.getSql("findByNameAndCompanyId",this),name,cid);
	}

}
