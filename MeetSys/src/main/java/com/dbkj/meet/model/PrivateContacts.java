package com.dbkj.meet.model;

import com.dbkj.meet.dic.Constant;
import com.dbkj.meet.model.base.BasePrivateContacts;
import com.dbkj.meet.utils.SqlUtil;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class PrivateContacts extends BasePrivateContacts<PrivateContacts> {
	public static final PrivateContacts dao = new PrivateContacts();
	public static String A_UID="a.uid";

	public int deleteByCompanyId(long id){
		return Db.update(SqlUtil.getSql("deleteByCompanyId",this),id);
	}

	public int deleteByDepartmentId(long id){
		return Db.update(SqlUtil.getSql("deleteByDepartmentId",this),id);
	}

	public List<Record> getContacts(Map<String,Object> map){
		StringBuilder where=new StringBuilder();
		List<Object> params=getSelectCondition(map,where);

		return Db.find(SqlUtil.getSql("getContacts",this).concat(where.toString()),params.toArray());
	}

	private List<Object> getSelectCondition(Map<String,Object> map,StringBuilder stringBuilder){
		List<Object> params=new ArrayList<Object>();

		if(map!=null) {
			if (stringBuilder == null) {
				stringBuilder = new StringBuilder(100);
			}

			if (map.containsKey("a.name") && map.containsKey("b.phone")) {
				if (stringBuilder.length() > 0) {
					stringBuilder.append(" AND ");
				} else {
					stringBuilder.append(" WHERE ");
				}
				stringBuilder.append("(a.name LIKE ? OR b.phone LIKE ?)");
				params.add("%" + map.get("a.name") + "%");
				params.add("%" + map.get("b.phone") + "%");
			}

			for (String key : map.keySet()) {
				Object value = map.get(key);
				if (value != null) {
					if (Constant.CURRENT_PAGE_KEY.equals(key) || Constant.PAGE_SIZE_KEY.equals(key)
							|| "a.name".equals(key) || "b.phone".equals(key)) {
						continue;
					}

					if (stringBuilder.length() == 0) {
						stringBuilder.append(" WHERE ");
					} else {
						stringBuilder.append(" AND ");
					}

					stringBuilder.append(key);
					if ("b.gid".equals(map.get(key)) && "0".equals(value.toString())) {//如果为0则为未分组
						stringBuilder.append(" IS NULL");
						continue;
					}
					stringBuilder.append("=?");
					params.add(value);
				}
			}
		}
		return params;
	}

	public List<Record> getContactsByUserId(long uid){
		return Db.find(SqlUtil.getSql("getContactsByUserId",this),uid);
	}

	public Page<PrivateContacts> getContactsPage(Map<String,Object> map){
		int currentPage=1;
		int pageSize= Constant.DEFAULT_PAGE_SIZE;
		StringBuilder where=new StringBuilder(100);
		List<Object> params=getSelectCondition(map,where);

		if(map!=null) {
			Object obj1 = map.get(Constant.CURRENT_PAGE_KEY);
			if (obj1 != null) {
				currentPage = Integer.parseInt(obj1.toString());
			}

			Object obj2 = map.get(Constant.PAGE_SIZE_KEY);
			if (obj2 != null) {
				pageSize = Integer.parseInt(obj2.toString());
			}
		}

		return paginate(currentPage,pageSize,SqlUtil.getSql("getContactsPage.select",this),
				SqlUtil.getSql("getContactsPage.sqlExceptSelect",this).concat(where.toString()),params.toArray());
	}


	public int deleteByGroupId(long gid){
		return Db.update(SqlUtil.getSql("deleteByGroupId",this),gid);
	}

	public Record findContact(Map<String,Object> map){
		StringBuilder where=new StringBuilder(50);
		List<Object> params=new ArrayList<Object>();
		if(map!=null){
			for(String key:map.keySet()){
				Object value=map.get(key);
				if(where.length()>0){
					where.append(" AND ");
				}else{
					where.append(" WHERE ");
				}
				if(value!=null){
					where.append(key);
					where.append("=?");
					params.add(value);
				}
			}
		}
		where.append(" LIMIT 0,1");
		return Db.findFirst(SqlUtil.getSql("findContact",this).concat(where.toString()),params.toArray());
	}

	public int deleteBatchById(long uid,List<Integer> ids){
		if(ids!=null&&ids.size()!=0){
			boolean flag=false;
			StringBuilder where=new StringBuilder(50);
			where.append("(");
			for(int i=0,len=ids.size();i<len;i++){
				Integer n=ids.get(i);
				if(n!=null){
					where.append(n);
					flag=true;
					if(i!=len-1){
						where.append(",");
					}
				}
			}
			if(flag){
				where.append(")");
					return Db.update(SqlUtil.getSql("deleteBatchById",this).concat(where.toString()),uid);
			}
		}
		return 0;
	}

	public PrivateContacts findByNameAndUserId(String name,long uid){
		return findFirst(SqlUtil.getSql("findByNameAndUserId",this),name,uid);
	}

	public List<Record> getContactsByCompanyId(long cid){
		return Db.find(SqlUtil.getSql("getContactsByCompanyId",this),cid);
	}
}
