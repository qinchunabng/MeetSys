package com.dbkj.meet.model;

import com.dbkj.meet.model.base.BaseAttendee;
import com.dbkj.meet.utils.ParameterUtil;
import com.dbkj.meet.utils.SqlUtil;
import com.jfinal.plugin.activerecord.Db;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Attendee extends BaseAttendee<Attendee> {
	public static final Attendee dao = new Attendee();

	public List<Attendee> findByRecordId(long id){
		return find(SqlUtil.getSql("findByRecordId",this),id);
	}

	public int updateAttendeeeStatus(String status, Map<String,Object> map){
		List<Object> params=new ArrayList<>();
		params.add(status);
		StringBuilder where=new StringBuilder(100);
		if(map!=null){
			for(String key:map.keySet()){
				Object value=map.get(key);
				if(value==null){
					continue;
				}
				if(where.length()==0){
					where.append(" WHERE ");
				}else{
					where.append(" AND ");
				}
				where.append(key);
				if("status".equals(key)){
					where.append(" IN ");
					String[] arr= (String[]) value;
					where.append("(");
					for(int i=0;i<arr.length;i++){
						where.append("?");
						if(i!=arr.length-1){
							where.append(",");
						}
						params.add(arr[i]);
					}
					where.append(")");
				}else{
					where.append("=?");
					params.add(value);
				}
			}
		}
		return Db.update(SqlUtil.getSql("updateAttendeeeStatus",this).concat(where.toString()),params.toArray());
	}

	public int deleteByRecordId(long rid){
		return Db.update(SqlUtil.getSql("deleteByRecordId",this),rid);
	}

	public int delete(Map<String,Object> paraMap){
		StringBuilder where=new StringBuilder(100);
		List<Object> params=new ArrayList<>();
		ParameterUtil.getPara(paraMap,where,params);
		return Db.update(SqlUtil.getSql("delete",this).concat(where.toString()),
				params.toArray(new Object[params.size()]));
	}

	public boolean insert(Attendee attendee){
		List<Object> params=new ArrayList<>();
		params.add(attendee.getName());
		params.add(attendee.getPhone());
		params.add(attendee.getRid());
		params.add(attendee.getType());
		params.add(attendee.getPhone());
		params.add(attendee.getRid());
		return Db.update(SqlUtil.getSql("insert",this),params.toArray(new Object[params.size()]))>0;
	}
}
