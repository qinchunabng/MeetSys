package com.dbkj.meet.model;

import com.dbkj.meet.model.base.BaseChargingMode;
import com.dbkj.meet.utils.SqlUtil;
import com.jfinal.plugin.activerecord.Db;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class ChargingMode extends BaseChargingMode<ChargingMode> {
	public static final ChargingMode dao = new ChargingMode();

	/**
	 *
	 */
	public final String NAME_KEY="name";
	public final String HANDLED_KEY="handled";
	public final String MODE_KEY="mode";

	/**
	 * 添加计费模式，采用ignore避免重复插入
	 * @param chargingMode
	 * @return
	 */
	public int insert(ChargingMode chargingMode){
		return Db.update(SqlUtil.getSql("insert",this),chargingMode.getBid(),
				chargingMode.getPid(),chargingMode.getCount(),chargingMode.getName(),chargingMode.getRemark(),
				chargingMode.getGmtCreate());
	}

	/**
	 * 获取最近一次计费模式信息
	 * @param id 账户余额id
	 * @return
	 */
	public ChargingMode getLastByAccountBalanceId(long id){
		return findFirst(SqlUtil.getSql("getLastByAccountBalanceId",this),id);
	}

	public ChargingMode findByNameAndAccountBalanceId(long id,int name){
		return findFirst(SqlUtil.getSql("findByNameAndAccountBalanceId",this),id,name);
	}

	public List<ChargingMode> findByName(String name){
		return find(SqlUtil.getSql("findByName",this),name);
	}

	public List<ChargingMode> getList(Map<String,Object> paraMap){
		StringBuilder where=new StringBuilder(50);
		List<Object> params=new ArrayList<>();
		if(paraMap.containsKey(HANDLED_KEY)){
			where.append(" AND ");
			where.append(HANDLED_KEY);
			where.append("=? OR ");
			where.append(HANDLED_KEY);
			where.append(" IS NULL");
			params.add(paraMap.get(HANDLED_KEY));
			paraMap.remove(HANDLED_KEY);
		}
		for(Map.Entry<String,Object> entry:paraMap.entrySet()){
			String key=entry.getKey();
			Object value=entry.getValue();
			if(value!=null){
				where.append(" AND ");
				where.append(key);
				where.append("=?");
				params.add(value);
			}
		}
		return find(SqlUtil.getSql("getList",this).concat(where.toString()),params.toArray(new Object[params.size()]));
	}

	public List<ChargingMode> getNotHandledListByName(int name){
		return find(SqlUtil.getSql("getNotHandledListByName",this),name);
	}
}
