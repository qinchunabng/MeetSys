package com.dbkj.meet.model;

import com.dbkj.meet.dic.Constant;
import com.dbkj.meet.dic.UserType;
import com.dbkj.meet.model.base.BaseUser;
import com.dbkj.meet.utils.SqlUtil;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class User extends BaseUser<User> {
	public static final User dao = new User();

	public User findUser(String username,String password){
		return findFirst(SqlUtil.getSql("findUser",this),username,password);
	}

	/**
	 * 根据条件获取User的分页数据
	 * @param where
	 * @return
     */
	public Page<Record> getUserPage(Map<String,Object> where){
		int currentPage=1;
		int pageSize=Constant.DEFAULT_PAGE_SIZE;

		StringBuilder whereSql=new StringBuilder(50);
		List<Object> params = new ArrayList<Object>();

		if(where.containsKey(Constant.CURRENT_PAGE_KEY)){
			currentPage=Integer.parseInt(where.get(Constant.CURRENT_PAGE_KEY).toString());
			where.remove(Constant.CURRENT_PAGE_KEY);
		}
		if(where.containsKey(Constant.PAGE_SIZE_KEY)){
			pageSize=Integer.parseInt(where.get(Constant.PAGE_SIZE_KEY).toString());
			where.remove(Constant.PAGE_SIZE_KEY);
		}
		String cid="cid";
		String username="username";
		if(where.containsKey(cid)){
			whereSql.append(" AND a.cid=?");
			params.add(where.get(cid));
			where.remove(cid);
		}
		if(where.containsKey(username)){
			whereSql.append(" AND a.username LIKE CONCAT('%',?,'%')");
			params.add(where.get(username));
			where.remove(username);
		}

		if(where!=null){
			for(Map.Entry<String,Object> entry : where.entrySet()){
				String key=entry.getKey();
				Object value=where.get(key);
				if(value!=null){
					whereSql.append(" AND ");
					whereSql.append(key);
					whereSql.append("=?");
					params.add(value);
				}
			}
			Object obj1=where.get(Constant.CURRENT_PAGE_KEY);
			if(obj1!=null){
				currentPage=Integer.parseInt(obj1.toString());
			}

			Object obj2=where.get(Constant.PAGE_SIZE_KEY);
			if(obj2!=null){
				pageSize=Integer.parseInt(obj2.toString());
			}
		}
		return Db.paginate(currentPage,pageSize, SqlUtil.getSql("getUserPage.select",this),
				SqlUtil.getSql("getUserPage.sqlExceptSelect",this).concat(whereSql.toString()),params.toArray());
	}

	public User findUserByUsername(String username){
		return findFirst(SqlUtil.getSql("findUserByUsername",this),username);
	}

	public int deleteByCompanyId(long id){
		return Db.update(SqlUtil.getSql("deleteByCompanyId",this),id);
	}

	public int deleteByDepartmentId(long id){
		return Db.update(SqlUtil.getSql("deleteByDepartmentId",this),id);
	}

	public int deleteBatch(int[] ids){
		if(ids!=null&&ids.length>0){
			StringBuilder sb=new StringBuilder(20);
			sb.append(" (");
			for(int i=0;i<ids.length;i++){
				sb.append(ids[i]);
				if(i!=ids.length-1){
					sb.append(",");
				}
			}
			sb.append(")");
			return Db.update(SqlUtil.getSql("deleteBatch",this).concat(sb.toString()));
		}
		return 0;
	}


	@Override
	public boolean deleteById(Object idValue) {
		User user = findById(idValue);
		user.setIsDel(Integer.parseInt(Constant.YES));
		return user.update();
	}
}
